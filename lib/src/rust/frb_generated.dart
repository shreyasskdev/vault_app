// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/file.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/error.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => -493258791;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_vault',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<bool> crateApiFileCheckPasswordExist({required String dir});

  Future<bool> crateApiFileCheckZipEncrypted({required String zipPath});

  Future<bool> crateApiFileCheckZipPassword(
      {required String zipPath, required String password});

  Future<void> crateApiFileCreateDir(
      {required String dir, required String albumName});

  Future<void> crateApiFileDeleteDir({required String dir});

  Future<void> crateApiFileDeleteFile({required String path});

  Future<Map<String, (String, double)>?> crateApiFileGetAlbumThumb(
      {required String dir});

  Future<List<String>> crateApiFileGetDirs({required String dir});

  Future<Uint8List> crateApiFileGetFile({required String path});

  Future<Uint8List> crateApiFileGetFileThumb({required String path});

  Future<Map<String, (String, double)>> crateApiFileGetImages(
      {required String dir});

  Future<void> crateApiFileRestoreBackup(
      {required String rootDir, required String zipPath, String? password});

  Future<void> crateApiFileSaveFile(
      {required List<int> imageData, required String dir});

  Future<void> crateApiFileSaveImage(
      {required List<int> imageData, required String dir});

  Future<void> crateApiFileSavePassword(
      {required String password, required String dir});

  Future<bool> crateApiFileSetPassword(
      {required String password, required String dir});

  Future<void> crateApiFileZipBackup(
      {required String rootDir,
      required String savePath,
      required bool encryption});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<bool> crateApiFileCheckPasswordExist({required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiFileCheckPasswordExistConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileCheckPasswordExistConstMeta =>
      const TaskConstMeta(
        debugName: "check_password_exist",
        argNames: ["dir"],
      );

  @override
  Future<bool> crateApiFileCheckZipEncrypted({required String zipPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(zipPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileCheckZipEncryptedConstMeta,
      argValues: [zipPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileCheckZipEncryptedConstMeta =>
      const TaskConstMeta(
        debugName: "check_zip_encrypted",
        argNames: ["zipPath"],
      );

  @override
  Future<bool> crateApiFileCheckZipPassword(
      {required String zipPath, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(zipPath, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileCheckZipPasswordConstMeta,
      argValues: [zipPath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileCheckZipPasswordConstMeta =>
      const TaskConstMeta(
        debugName: "check_zip_password",
        argNames: ["zipPath", "password"],
      );

  @override
  Future<void> crateApiFileCreateDir(
      {required String dir, required String albumName}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        sse_encode_String(albumName, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileCreateDirConstMeta,
      argValues: [dir, albumName],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileCreateDirConstMeta => const TaskConstMeta(
        debugName: "create_dir",
        argNames: ["dir", "albumName"],
      );

  @override
  Future<void> crateApiFileDeleteDir({required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileDeleteDirConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileDeleteDirConstMeta => const TaskConstMeta(
        debugName: "delete_dir",
        argNames: ["dir"],
      );

  @override
  Future<void> crateApiFileDeleteFile({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileDeleteFileConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileDeleteFileConstMeta => const TaskConstMeta(
        debugName: "delete_file",
        argNames: ["path"],
      );

  @override
  Future<Map<String, (String, double)>?> crateApiFileGetAlbumThumb(
      {required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_Map_String_record_string_f_32_None,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileGetAlbumThumbConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileGetAlbumThumbConstMeta => const TaskConstMeta(
        debugName: "get_album_thumb",
        argNames: ["dir"],
      );

  @override
  Future<List<String>> crateApiFileGetDirs({required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileGetDirsConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileGetDirsConstMeta => const TaskConstMeta(
        debugName: "get_dirs",
        argNames: ["dir"],
      );

  @override
  Future<Uint8List> crateApiFileGetFile({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileGetFileConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileGetFileConstMeta => const TaskConstMeta(
        debugName: "get_file",
        argNames: ["path"],
      );

  @override
  Future<Uint8List> crateApiFileGetFileThumb({required String path}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileGetFileThumbConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileGetFileThumbConstMeta => const TaskConstMeta(
        debugName: "get_file_thumb",
        argNames: ["path"],
      );

  @override
  Future<Map<String, (String, double)>> crateApiFileGetImages(
      {required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_record_string_f_32_None,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileGetImagesConstMeta,
      argValues: [dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileGetImagesConstMeta => const TaskConstMeta(
        debugName: "get_images",
        argNames: ["dir"],
      );

  @override
  Future<void> crateApiFileRestoreBackup(
      {required String rootDir, required String zipPath, String? password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(rootDir, serializer);
        sse_encode_String(zipPath, serializer);
        sse_encode_opt_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileRestoreBackupConstMeta,
      argValues: [rootDir, zipPath, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileRestoreBackupConstMeta => const TaskConstMeta(
        debugName: "restore_backup",
        argNames: ["rootDir", "zipPath", "password"],
      );

  @override
  Future<void> crateApiFileSaveFile(
      {required List<int> imageData, required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(imageData, serializer);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileSaveFileConstMeta,
      argValues: [imageData, dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileSaveFileConstMeta => const TaskConstMeta(
        debugName: "save_file",
        argNames: ["imageData", "dir"],
      );

  @override
  Future<void> crateApiFileSaveImage(
      {required List<int> imageData, required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(imageData, serializer);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileSaveImageConstMeta,
      argValues: [imageData, dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileSaveImageConstMeta => const TaskConstMeta(
        debugName: "save_image",
        argNames: ["imageData", "dir"],
      );

  @override
  Future<void> crateApiFileSavePassword(
      {required String password, required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileSavePasswordConstMeta,
      argValues: [password, dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileSavePasswordConstMeta => const TaskConstMeta(
        debugName: "save_password",
        argNames: ["password", "dir"],
      );

  @override
  Future<bool> crateApiFileSetPassword(
      {required String password, required String dir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(password, serializer);
        sse_encode_String(dir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileSetPasswordConstMeta,
      argValues: [password, dir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileSetPasswordConstMeta => const TaskConstMeta(
        debugName: "set_password",
        argNames: ["password", "dir"],
      );

  @override
  Future<void> crateApiFileZipBackup(
      {required String rootDir,
      required String savePath,
      required bool encryption}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(rootDir, serializer);
        sse_encode_String(savePath, serializer);
        sse_encode_bool(encryption, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vault_error,
      ),
      constMeta: kCrateApiFileZipBackupConstMeta,
      argValues: [rootDir, savePath, encryption],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFileZipBackupConstMeta => const TaskConstMeta(
        debugName: "zip_backup",
        argNames: ["rootDir", "savePath", "encryption"],
      );

  @protected
  Map<String, (String, double)> dco_decode_Map_String_record_string_f_32_None(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_record_string_f_32(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, (String, double))>
      dco_decode_list_record_string_record_string_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_record_string_f_32)
        .toList();
  }

  @protected
  Map<String, (String, double)>?
      dco_decode_opt_Map_String_record_string_f_32_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_Map_String_record_string_f_32_None(raw);
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  (String, double) dco_decode_record_string_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_f_32(arr[1]),
    );
  }

  @protected
  (String, (String, double)) dco_decode_record_string_record_string_f_32(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_record_string_f_32(arr[1]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  VaultError dco_decode_vault_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return VaultError_Error(
          dco_decode_String(raw[1]),
        );
      case 1:
        return const VaultError_IncorrectPassword();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Map<String, (String, double)> sse_decode_Map_String_record_string_f_32_None(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_record_string_f_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, (String, double))>
      sse_decode_list_record_string_record_string_f_32(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, (String, double))>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_record_string_f_32(deserializer));
    }
    return ans_;
  }

  @protected
  Map<String, (String, double)>?
      sse_decode_opt_Map_String_record_string_f_32_None(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_Map_String_record_string_f_32_None(deserializer));
    } else {
      return null;
    }
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, double) sse_decode_record_string_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, (String, double)) sse_decode_record_string_record_string_f_32(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_record_string_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  VaultError sse_decode_vault_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return VaultError_Error(var_field0);
      case 1:
        return const VaultError_IncorrectPassword();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_Map_String_record_string_f_32_None(
      Map<String, (String, double)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_record_string_f_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_record_string_f_32(
      List<(String, (String, double))> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_record_string_f_32(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_Map_String_record_string_f_32_None(
      Map<String, (String, double)>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_Map_String_record_string_f_32_None(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_record_string_f_32(
      (String, double) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_record_string_f_32(
      (String, (String, double)) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_record_string_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_vault_error(VaultError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case VaultError_Error(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case VaultError_IncorrectPassword():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
