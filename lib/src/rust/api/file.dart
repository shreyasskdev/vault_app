// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../utils/error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<bool> setPassword({required String password, required String dir}) =>
    RustLib.instance.api.crateApiFileSetPassword(password: password, dir: dir);

Future<void> savePassword({required String password, required String dir}) =>
    RustLib.instance.api.crateApiFileSavePassword(password: password, dir: dir);

Future<bool> checkPasswordExist({required String dir}) =>
    RustLib.instance.api.crateApiFileCheckPasswordExist(dir: dir);

Future<void> createDir({required String dir, required String albumName}) =>
    RustLib.instance.api.crateApiFileCreateDir(dir: dir, albumName: albumName);

Future<void> deleteDir({required String dir}) =>
    RustLib.instance.api.crateApiFileDeleteDir(dir: dir);

Future<List<String>> getDirs({required String dir}) =>
    RustLib.instance.api.crateApiFileGetDirs(dir: dir);

Future<Map<String, (String, double)>> getImages({required String dir}) =>
    RustLib.instance.api.crateApiFileGetImages(dir: dir);

Future<Map<String, (String, double)>?> getAlbumThumb({required String dir}) =>
    RustLib.instance.api.crateApiFileGetAlbumThumb(dir: dir);

Future<Uint8List> getFileThumb({required String path}) =>
    RustLib.instance.api.crateApiFileGetFileThumb(path: path);

Future<Uint8List> getFile({required String path}) =>
    RustLib.instance.api.crateApiFileGetFile(path: path);

Future<void> saveImage({required List<int> imageData, required String dir}) =>
    RustLib.instance.api.crateApiFileSaveImage(imageData: imageData, dir: dir);

Future<void> saveFile({required List<int> imageData, required String dir}) =>
    RustLib.instance.api.crateApiFileSaveFile(imageData: imageData, dir: dir);

Future<void> deleteFile({required String path}) =>
    RustLib.instance.api.crateApiFileDeleteFile(path: path);

Future<void> zipBackup(
        {required String rootDir,
        required String savePath,
        required bool encryption}) =>
    RustLib.instance.api.crateApiFileZipBackup(
        rootDir: rootDir, savePath: savePath, encryption: encryption);

Future<void> restoreBackup(
        {required String rootDir, required String zipPath, String? password}) =>
    RustLib.instance.api.crateApiFileRestoreBackup(
        rootDir: rootDir, zipPath: zipPath, password: password);

Future<bool> checkZipEncrypted({required String zipPath}) =>
    RustLib.instance.api.crateApiFileCheckZipEncrypted(zipPath: zipPath);
